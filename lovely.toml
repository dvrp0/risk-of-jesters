[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Update Booster Packs' descriptions when modded Vouchers are redeemed
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if not full_UI_table.name then full_UI_table.name = localize{type = 'name', set = 'Other', key = name_override, nodes = full_UI_table.name} end'''
position = "before"
payload = '''
if G.GAME.used_vouchers.v_3d_printer then
    loc_vars[2] = loc_vars[2] + 1
end
if G.GAME.used_vouchers.v_militech_printer then
    loc_vars[1] = loc_vars[1] + 1
end
'''
match_indent = true
overwrite = false

# Make Booster Packs have one more card
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''local _size = self.ability.extra'''
position = "after"
payload = '''
if G.GAME.used_vouchers.v_3d_printer then
    _size = _size + 1
end
'''
match_indent = true
overwrite = false

# Make Booster Packs have one more choice
# Adjusting `G.GAME.pack_size` is necessary to make cards have enough spaces between them
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''G.GAME.pack_choices = self.config.center.config.choose or 1'''
position = "after"
payload = '''
if G.GAME.used_vouchers.v_3d_printer then
    G.GAME.pack_size = G.GAME.pack_size + 1
end
if G.GAME.used_vouchers.v_militech_printer then
    G.GAME.pack_choices = G.GAME.pack_choices + 1
end
'''
match_indent = true
overwrite = false

# Inject description variables for modded Jokers
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''elseif self.ability.name == 'Perkeo' then loc_vars = {self.ability.extra}'''
position = "after"
payload = '''
elseif self.ability.name == "Egocentrism" then
    local count = 0

    if G.jokers and G.jokers.cards then
        for _, joker in ipairs(G.jokers.cards) do
            if joker.ability.set == "Joker" and joker.ability.name == "Egocentrism" then
                count = count + 1
            end
        end
    end

    loc_vars = {self.ability.extra, count * self.ability.extra}
elseif self.ability.name == "Eulogy Zero" then
    loc_vars = {''..(G.GAME and G.GAME.probabilities.normal or 1), self.ability.extra}
elseif self.ability.name == "Snake Eyes" then
    loc_vars = {self.ability.extra.mult_mod, self.ability.extra.mult}
elseif self.ability.name == "Bustling Fungus" then
    loc_vars = {self.ability.extra, self.ability.bungus_rounds}
elseif self.ability.name == "Lepton Daisy" then
    loc_vars = {self.ability.extra}
elseif self.ability.name == "Kjaro's Band" then
    loc_vars = {self.ability.extra.Xmult, self.ability.extra.required}

    if G.GAME and self.area and self.area == G.jokers then
        main_end = {
            {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
                {n=G.UIT.C, config={ref_table = self, align = "m", colour = self.ability.enabled and G.C.GREEN or G.C.RED, r = 0.05, padding = 0.06}, nodes={
                    {n=G.UIT.T, config={text = ' '..localize(self.ability.enabled and "k_active" or "ph_kjaro_disabled").." ",colour = G.C.UI.TEXT_LIGHT, scale = 0.32 * 0.9}},
                }}
            }}
        }
    end
elseif self.ability.name == "Happiest Mask" then
    loc_vars = {''..(G.GAME and G.GAME.probabilities.normal or 1), self.ability.extra}
elseif self.ability.name == "Encrusted Key" then
    loc_vars = {localize{type = "name_text", set = "Tag", key = "tag_coupon", nodes = {}}}
'''
match_indent = true
overwrite = false

# Inject description UI Box for modded Jokers
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif _c.name == 'Perkeo' then info_queue[#info_queue+1] = {key = 'e_negative_consumable', set = 'Edition', config = {extra = 1}}'''
position = "after"
payload = '''
elseif _c.name == "Bustling Fungus" then
    table.insert(info_queue, G.P_CENTERS.e_foil)
elseif _c.name == "Substandard Duplicator" then
    table.insert(info_queue, G.P_CENTERS.e_negative)
    table.insert(info_queue, {
        key = "temporary",
        set = "Other"
    })
elseif _c.name == "Encrusted Key" then
    table.insert(info_queue, {
        key = "tag_coupon",
        set = "Tag"
    })
'''
match_indent = true
overwrite = false

# Inject description variables for modded Vouchers
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif _c.name == "Clearance Sale" or _c.name == "Liquidation" then loc_vars = {_c.config.extra}'''
position = "after"
payload = '''
elseif _c.name == "3D Printer" or _c.name == "Mili-Tech Printer" then loc_vars = {_c.config.extra}
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.sticker then loc_vars = loc_vars or {}; loc_vars.sticker=self.sticker end'''
position = "after"
payload = '''
if self.ability.temporary then
    badges[#badges + 1] = "temporary"
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if v == 'pinned_left' then info_queue[#info_queue+1] = {key = 'pinned_left', set = 'Other'} end'''
position = "after"
payload = '''
if v == "temporary" then
    info_queue[#info_queue + 1] = {
        key = "temporary",
        set = "Other"
    }
end
'''
match_indent = true
overwrite = false

# Make Blind collection page have variable number of rows
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''blind_matrix[math.ceil((k-1)/5+0.001)][1+((k-1)%5)] = {n=G.UIT.C, config={align = "cm", padding = 0.1}, nodes={'''
position = "before"
payload = '''
local index = math.ceil((k - 1) / 5 + 0.001)

if not blind_matrix[index] then
    blind_matrix[index] = {}
end
'''
match_indent = true
overwrite = false

# Display modded Blinds in the Blind collection page
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local extras = nil'''
position = "after"
payload = '''
if blind_matrix then
    local blinds = {}
    for i = 1, #blind_matrix do
        blinds[i] = {n=G.UIT.R, config={align = "cm"}, nodes=blind_matrix[i]}
    end

    local t = create_UIBox_generic_options({ back_func = exit or 'your_collection', contents = {
        {n=G.UIT.C, config={align = "cm", r = 0.1, colour = G.C.BLACK, padding = 0.1, emboss = 0.05}, nodes={
            {n=G.UIT.C, config={align = "cm", r = 0.1, colour = G.C.L_BLACK, padding = 0.1, force_focus = true, focus_args = {nav = 'tall'}}, nodes={
                {n=G.UIT.R, config={align = "cm", padding = 0.05}, nodes={
                    {n=G.UIT.C, config={align = "cm", minw = 0.7}, nodes={
                        {n=G.UIT.T, config={text = localize('k_ante_cap'), scale = 0.4, colour = lighten(G.C.FILTER, 0.2), shadow = true}},
                    }},
                    {n=G.UIT.C, config={align = "cr", minw = 2.8}, nodes={
                        {n=G.UIT.T, config={text = localize('k_base_cap'), scale = 0.4, colour = lighten(G.C.RED, 0.2), shadow = true}},
                    }}
                }},
                {n=G.UIT.R, config={align = "cm"}, nodes=ante_amounts}
            }},
            {n=G.UIT.C, config={align = "cm"}, nodes={
                {n=G.UIT.R, config={align = "cm"}, nodes=blinds}
            }}
        }}
    }})
    return t
end
'''
match_indent = true
overwrite = false

# Display modded Blinds' own sprites
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local temp_blind = AnimatedSprite(0,0,1.3,1.3, G.ANIMATION_ATLAS['blind_chips'], discovered and v.pos or G.b_undiscovered.pos)'''
position = "at"
payload = '''local temp_blind = AnimatedSprite(0,0,1.3,1.3, G.ANIMATION_ATLAS[v.atlas and v.atlas or 'blind_chips'], discovered and v.pos or G.b_undiscovered.pos)'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''blind_choice.animation = AnimatedSprite(0,0, 1.4, 1.4, G.ANIMATION_ATLAS['blind_chips'],  blind_choice.config.pos)'''
position = "at"
payload = '''blind_choice.animation = AnimatedSprite(0,0, 1.4, 1.4, G.ANIMATION_ATLAS[blind_choice.config.atlas and blind_choice.config.atlas or 'blind_chips'],  blind_choice.config.pos)'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''local blind_sprite = AnimatedSprite(0, 0, 1.2,1.2, G.ANIMATION_ATLAS['blind_chips'], copy_table(G.GAME.blind.pos))'''
position = "at"
payload = '''local blind_sprite = AnimatedSprite(0, 0, 1.2,1.2, G.ANIMATION_ATLAS[G.GAME.blind.config.atlas and G.GAME.blind.config.atlas or 'blind_chips'], copy_table(G.GAME.blind.pos))'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''if G.P_BLINDS[blindTable.config_blind] then'''
position = "after"
payload = '''
self.children.animatedSprite.atlas = G.ANIMATION_ATLAS[self.config.blind.atlas and self.config.blind.atlas or 'blind_chips']
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''if self.debuff.value and self.debuff.value == card.base.value then'''
position = "before"
payload = '''
if self.name == "Glaucous Hammer" and card.ability.hammered then
    card:set_debuff(true)
    return
end
'''
match_indent = true
overwrite = false